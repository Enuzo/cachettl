searchNodes=[{"doc":"Cachettl is an implementation of a periodic self-rehydrating TTL cache that resiliently handles expensive data-processing ahead of time for fast access. The cache mechanism generates 0-arity functions that embed inbound data from store/3 . Each function is registered under a unique key along with a TTL(&quot;time to live&quot;). Child processes are assigned to compute the functions at set intervals and store the results. The cache is expected to provide the most recently computed value whenever get/1 is called. Feature Critical tasks are executed concurrently ensuring quality performance without race conditions. Child processes are free from their parent. Instead, they are linked to a chain of supervisors to the main application-- ensuring application-wide stability with data-processing workers resilient to runtime exceptions. Storage is optimized for concurrent read/write. Use Case Input data is high-frequency fast-changing queries. Data requires processing that is expensive to compute, therefore, data processing must start and be completed before it is needed, not when it is being requested for. Data is not frequently accessed, but fast access is guaranteed when needed. Test-Run Utility See Cachettl.MockWeather","ref":"Cachettl.html","title":"Cachettl","type":"module"},{"doc":"get/1 Retrieve the value for a specified key from the cache. If key exists in the cache and initial data associated with key is available, {:ok, data} is returned. If data-prccessing is in progress on first-run hence the data associated with key has not been stored, then {:busy, reason} is returned. If key is not present in the cache, {:error, reason} is returned. Note: Client application calling Cachettl.get(key) should be responsible for implementing a polling function with a timeout mechanism. While this may be rarely needed, it should be available in cases where the requested data does not yet exist in the cache on initial run.","ref":"Cachettl.html#get/1","title":"Cachettl.get/1","type":"function"},{"doc":"Add new or update existing value with its ttl in the cache under key . ttl value is expected to be greater than the refresh_interval (see Cachettl.Manager configuration). It is recommended that ttl value is divisible by the refresh_interval . if ttl is not given, it defaults to 36_000 seconds(1 hour). ttl should be specified in seconds, either in integer or decimal . The provided value will convert to milliseconds internally. Cachettl . store ( &quot;HEL&quot; , %{ } , 10 ) # internal conversion #=&gt; Storage.sec_to_ms(10) == 10_000 #=&gt; true Cachettl . store ( &quot;HEL&quot; , %{ } , 10.50 ) # internal conversion #=&gt; Storage.sec_to_ms(10.50) == 10_500 #=&gt; true # when ttl is not specified... Cachettl . store ( &quot;HEL&quot; , %{ } ) # internal conversion #=&gt; Storage.sec_to_ms(36_000) #=&gt; 36000","ref":"Cachettl.html#store/3","title":"Cachettl.store/3","type":"function"},{"doc":"","ref":"Cachettl.html#t:get_returns/0","title":"Cachettl.get_returns/0","type":"type"},{"doc":"Cachettl.MockWeather provides utility functions that are available for emulating the cache operation as part of the test coverage. Example Open two terminals. Lets call them Terminal-1 and Terminal-2 Run the following lines in the cache project directory: # Terminal-1 / cache $ iex -- sname server @localhost - S mix #=&gt; Erlang/OTP... # Terminal-2 / cache $ iex -- sname client @localhost - S mix #=&gt; Erlang/OTP... # Treminal-2: connect to :server@localhost iex ( client @localhost ) 1 &gt; Node . connect ( :server@localhost ) #=&gt; true # Terminal-1: verify connection iex ( server @localhost ) 1 &gt; Node . list ( ) #=&gt; [:client@localhost] # Terminal-2: verify connection iex ( client @localhost ) 2 &gt; Node . list ( ) #=&gt; [:server@localhost] # Terminal-1: use Observer to view performance and structures of running processes iex ( server @localhost ) 2 &gt; :observer . start ( ) #=&gt; ... #=&gt; :ok # Terminal-1 iex ( server @localhost ) 3 &gt; Cachettl.MockWeather . loop_store ( ) # Terminal-2 iex ( client @localhost ) 3 &gt; Node . spawn ( :server@localhost , Cachettl.MockWeather , :loop_get , [ ] ) Expect to also get exceptions like this: ... [ warning ] Worker - LUX Terminated . Reason : { % RuntimeError { message : &quot;faking an exception&quot; } ... ... [ error ] GenServer { Cachettl.WorkerRegistry , &quot;LUX-worker&quot; , :fun_0_arity_processor } terminating ** (RuntimeError) faking an exception It is a deliberate part of the test to verify how the Supervisor handles child-process failure.","ref":"Cachettl.MockWeather.html","title":"Cachettl.MockWeather","type":"module"},{"doc":"generate_0_arity_fun/1 generates a 0-arity function that embeds value which is to be computed at a later time. The 0-arity mimics an expensive data processing that takes a range of 2 - 4 seconds to complete. Result is designed to return {:ok, data} or {:error, reason} , or raise/1 as part of the test. Note: You are not expected to call this function directly.","ref":"Cachettl.MockWeather.html#generate_0_arity_fun/1","title":"Cachettl.MockWeather.generate_0_arity_fun/1","type":"function"},{"doc":"loop_get/0 calls Cachettl.get/1 in a recursive loop that mimics infrequent data retrieval. It runs every 6 seconds and takes a random key as an argument on every call.","ref":"Cachettl.MockWeather.html#loop_get/0","title":"Cachettl.MockWeather.loop_get/0","type":"function"},{"doc":"loop_get_single/0 same as loop_get/0 but takes the same key as argument on every call.","ref":"Cachettl.MockWeather.html#loop_get_single/0","title":"Cachettl.MockWeather.loop_get_single/0","type":"function"},{"doc":"loop_store/0 calls Cachettl.store/3 in a recursive loop that mimics periodic fast data queries. It runs every second, takes random keys/value that represents mock-weather data by cities, and generated TTL in the range of 30 - 60 seconds as arguments on every call.","ref":"Cachettl.MockWeather.html#loop_store/0","title":"Cachettl.MockWeather.loop_store/0","type":"function"},{"doc":"loop_store_single/0 same as loop_store/0 but takes a single key/value as argument on every call.","ref":"Cachettl.MockWeather.html#single_loop_store/0","title":"Cachettl.MockWeather.single_loop_store/0","type":"function"}]